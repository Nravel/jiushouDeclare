<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/8/28
 * Time: 16:47
 */

namespace app\admin\controller;

//use think\Db;
//use think\Loader;
//use think\Request;
use think\Session;
use think\Validate;
use app\admin\model\Admin as AdminModel;

class Admin extends Common
{
    protected $adminModel;
    protected $noParam = true;    //请求参数为空

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->adminModel = new AdminModel();
        $this->adminModel->request = $this->request;
        $this->noParam = count($this->request->param())===0;
    }

    /**
     * 管理员列表
     * @return mixed
     */
    public function index() {
        if ($this->noParam) {
            return $this->fetch('admin-list');
        }else{
            return $this->adminModel->getUsers();
        }
    }

    /**
     * 修改后台用户密码
     * @return array|mixed
     */
    public function passwordEdit() {
        $request = $this->request->post();
        if ($request!=null) {
            $validate = new Validate([
                'oldpassword' => 'require',
                'newpassword' => 'require'
            ]);
            if (!$validate->batch()->check(['oldpassword'=>$request['oldpassword'],'newpassword'=>$request['newpassword']])) {
                return [
                    'code' => '0003',
                    'msg' => $validate->getError()
                ];
            }
            $admin = new \app\admin\model\Admin();
            $result = $admin->get(['username'=>Session::get('username'),'password'=>md5($request['oldpassword'])]);
            if ($result) {
                $admin->noUpdate();
                $admin->save(['password'=>md5($request['newpassword'])],['username'=>Session::get('username')]);
                return [
                    'code' => '0000',
                    'msg' => "修改成功！"
                ];
            }else{
                return [
                    'code' => '0002',
                    'msg' => "原密码错误！"
                ];
            }
        }else{
            return $this->fetch('admin-password-edit');
        }
    }

    /**
     * 管理员搜索
     * @return mixed
     */
    public function search() {
        return $this->adminModel->search();
    }

    /**
     * 获取用户组
     * @return mixed
     */
    public function getAuthGroup() {
        return $this->adminModel->getAuthGroup();
    }

    /**
     * 管理员添加
     * @return mixed
     */
    public function add() {
        if ($this->noParam) {
            return $this->fetch('admin-add');
        }else{
            return $this->adminModel->addUser();
        }
    }

    /**
     * 管理员修改
     * @return mixed
     */
    public function edit() {
        if ($this->noParam) {
            return $this->fetch('admin-edit');
        }else{
            return $this->adminModel->editUser();
        }
    }

    /**
     * 管理员删除
     * @return mixed
     */
    public function delUsers() {
        return $this->adminModel->delUsers();
    }

    /******************************************************用户组*******************************************************************/

    /**
     * 用户组列表
     * @return mixed
     */
    public function groups() {
        if ($this->noParam) {
            return $this->fetch('admin-group');
        }else{
            return $this->adminModel->getGroups();
        }
    }

    /**
     * 用户组添加
     * @return mixed
     */
    public function groupsAdd() {
        if ($this->noParam) {
            return $this->fetch('admin-group-add');
        }else{
            return $this->adminModel->addGroup();
        }
    }

    /**
     * 用户组信息修改
     * @return mixed
     */
    public function groupsEdit() {
        if ($this->noParam) {
            return $this->fetch('admin-group-edit');
        }else{
            return $this->adminModel->editGroup();
        }
    }

    /**
     * 用户组成员管理
     * @return mixed
     */
    public function groupsMember() {
        if ($this->noParam) {
            return $this->fetch('admin-group-member');
        }else if ($this->request->param('req')==='get'){
            return $this->adminModel->getGroupMembers();
        }else if ($this->request->param('req')==='add'){
            return $this->adminModel->addMember();
        }else if ($this->request->param('req')==='remove'){
            return $this->adminModel->removeGroupMember();
        }
    }

    /**
     * 用户组授权管理
     * @return mixed
     */
    public function groupsAuthorize() {
        if ($this->noParam) {
            return $this->fetch('admin-group-authorize');
        }else if ($this->request->param('req') === 'get'){
            return $this->adminModel->getRules();
        }else if ($this->request->param('req') === 'edit'){
            return $this->adminModel->editRules();
        }
    }

    /**
     * 用户组删除
     * @return mixed
     */
    public function delGroups() {
       return $this->adminModel->delGroups();
    }

    /****************************************************权限**********************************************************/

    /**
     * 权限列表
     * @return mixed
     */
    public function permission() {
        if ($this->noParam) {
            return $this->fetch('admin-permission');
        }else{
            return $this->adminModel->getPermissionData();
        }
    }

    /**
     * 权限添加
     * @return mixed
     */
    public function permissionAdd() {
        if ($this->noParam) {
            return $this->fetch('admin-permission-add');
        }else{
            return $this->adminModel->addPermission();
        }
    }

    /**
     * 修改权限
     * @return mixed
     */
    public function permissionEdit() {
        if ($this->noParam) {
            return $this->fetch('admin-permission-edit');
        }else{
            return $this->adminModel->editPermission();
        }
    }

    /**
     * 权限删除
     * @return mixed
     */
    public function delPermission() {
        return $this->adminModel->delPermission();
    }

}